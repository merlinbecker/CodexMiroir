name: SonarCloud Quality Radar

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  quality-check:
    name: SonarCloud Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      # Check if PR has chore label and skip if it does
      - name: Check if PR has chore label
        id: check-label
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            const hasChoreLabel = labels.includes('chore');
            console.log('PR labels:', labels);
            console.log('Has chore label:', hasChoreLabel);
            core.setOutput('should-run', !hasChoreLabel);
            return !hasChoreLabel;

      # Checkout code
      - name: Checkout code
        if: steps.check-label.outputs.should-run != 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      # Setup Node.js
      - name: Setup Node.js
        if: steps.check-label.outputs.should-run != 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        if: steps.check-label.outputs.should-run != 'false'
        run: npm ci

      # Run tests with coverage
      - name: Run tests with coverage
        if: steps.check-label.outputs.should-run != 'false'
        run: |
          npm run test:ci

      # Build the application
      - name: Build application
        if: steps.check-label.outputs.should-run != 'false'
        run: npm run build || echo "No build script found"

      # SonarCloud Scan
      - name: SonarCloud Scan
        if: steps.check-label.outputs.should-run != 'false'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Generate quality radar chart
      - name: Generate Quality Radar Chart
        if: steps.check-label.outputs.should-run != 'false'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: merlinbecker
          SONAR_PROJECT_KEY: merlinbecker_CodexMiroir
        run: |
          set -euo pipefail
          
          # SonarCloud API configuration
          base="https://sonarcloud.io"
          proj="$SONAR_PROJECT_KEY"
          metrics="security_rating,reliability_rating,sqale_rating,coverage,duplicated_lines_density,ncloc"
          
          # Helper function for authenticated API requests
          auth() { 
            curl -sS -u "${SONAR_TOKEN}:" "$@" 2>/dev/null || echo '{"component":{"measures":[]}}'
          }

          # Fetch current metrics from SonarCloud
          echo "🔍 Fetching current quality metrics..."
          current_json=$(auth "${base}/api/measures/component?component=${proj}&metricKeys=${metrics}")
          
          if echo "$current_json" | grep -q '"component"'; then
            echo "✅ Successfully fetched current metrics"
          else
            echo "⚠️ No metrics available yet, using defaults"
            current_json='{"component":{"measures":[]}}'
          fi
          
          # Determine branch name for history lookup
          # For PRs use base branch (usually main), for direct pushes use current branch
          if [ -n "$GITHUB_HEAD_REF" ]; then
            # This is a PR - use the base branch for history comparison
            branch="${GITHUB_BASE_REF:-main}"
            echo "📌 PR detected - comparing against base branch: $branch"
          else
            # Direct push - use current branch
            branch="${GITHUB_REF_NAME:-main}"
            echo "📌 Direct push to branch: $branch"
          fi
          
          # Fetch analysis history from SonarCloud
          echo "🔍 Fetching analysis history for branch: $branch"
          analyses=$(auth "${base}/api/project_analyses/search?project=${proj}&branch=${branch}")
          
          # Parse previous analysis date
          if echo "$analyses" | grep -q '"analyses"'; then
            # Get the second most recent analysis (first is current, second is previous)
            prev_date=$(echo "$analyses" | jq -r '[.analyses[] | .date] | sort | reverse | .[1] // empty' 2>/dev/null || echo "")
            
            if [ -n "$prev_date" ]; then
              echo "✅ Found previous analysis from: $prev_date"
            else
              echo "⚠️ Only one analysis found - no comparison data yet"
              prev_date=""
            fi
          else
            echo "⚠️ No analysis history available"
            prev_date=""
          fi
          
          # Fetch previous metrics if available
          previous_json='{"measures":[]}'
          if [ -n "$prev_date" ]; then
            echo "📊 Fetching previous metrics for comparison"
            previous_json=$(auth "${base}/api/measures/search_history?component=${proj}&metrics=${metrics}&from=${prev_date}&to=${prev_date}")
            
            if echo "$previous_json" | grep -q '"measures"' && [ "$(echo "$previous_json" | jq -r '.measures | length')" -gt 0 ]; then
              echo "✅ Successfully retrieved previous metrics"
            else
              echo "⚠️ No previous metrics data available"
              previous_json='{"measures":[]}'
            fi
          fi

          # Create the radar chart generator script
          cat > generate_radar.mjs << 'EOF'
          import fs from 'fs';
          
          // Parse input data from command line
          const currentData = JSON.parse(process.argv[2] || '{"component":{"measures":[]}}');
          const previousData = JSON.parse(process.argv[3] || '{"measures":[]}');
          
          // Transform SonarCloud ratings to radar scale
          // SonarCloud uses 1=A (best) to 5=E (worst)
          // Radar chart needs 5=best to 0=worst
          function transformRating(value) {
            if (!value || value === 'No data') return 0;
            const num = parseInt(value);
            return num ? 6 - num : 0; // Invert: 1→5, 2→4, 3→3, 4→2, 5→1
          }
          
          // Transform percentage (0-100) to radar scale (0-5)
          function transformPercentage(value) {
            if (!value || value === 'No data') return 0;
            return Math.round(parseFloat(value) / 20);
          }
          
          // Transform lines of code to radar scale using logarithmic buckets
          function transformLOC(value) {
            if (!value || value === 'No data') return 0;
            const loc = parseInt(value);
            if (loc < 100) return 1;
            if (loc < 500) return 2;
            if (loc < 1000) return 3;
            if (loc < 5000) return 4;
            return 5;
          }
          
          // Extract metric value from current measures array
          function getMetricValue(measures, metric) {
            const measure = measures.find(m => m.metric === metric);
            return measure ? measure.value : 'No data';
          }
          
          // Extract metric value from history measures array
          function getHistoryValue(measures, metric) {
            const measure = measures.find(m => m.metric === metric);
            if (!measure || !measure.history || measure.history.length === 0) {
              return 'No data';
            }
            return measure.history[0].value;
          }
          
          // Process current metrics
          const currentMeasures = currentData.component?.measures || [];
          const current = {
            security: transformRating(getMetricValue(currentMeasures, 'security_rating')),
            reliability: transformRating(getMetricValue(currentMeasures, 'reliability_rating')),
            maintainability: transformRating(getMetricValue(currentMeasures, 'sqale_rating')),
            coverage: transformPercentage(getMetricValue(currentMeasures, 'coverage')),
            duplicateCode: 5 - transformPercentage(getMetricValue(currentMeasures, 'duplicated_lines_density')),
            linesOfCode: transformLOC(getMetricValue(currentMeasures, 'ncloc'))
          };
          
          // Process previous metrics for comparison
          let previous = { security: 0, reliability: 0, maintainability: 0, coverage: 0, duplicateCode: 0, linesOfCode: 0 };
          const hasPrevious = previousData.measures && previousData.measures.length > 0;
          
          if (hasPrevious) {
            console.log('✅ Including previous metrics for comparison');
            const prevMeasures = previousData.measures;
            previous = {
              security: transformRating(getHistoryValue(prevMeasures, 'security_rating')),
              reliability: transformRating(getHistoryValue(prevMeasures, 'reliability_rating')),
              maintainability: transformRating(getHistoryValue(prevMeasures, 'sqale_rating')),
              coverage: transformPercentage(getHistoryValue(prevMeasures, 'coverage')),
              duplicateCode: 5 - transformPercentage(getHistoryValue(prevMeasures, 'duplicated_lines_density')),
              linesOfCode: transformLOC(getHistoryValue(prevMeasures, 'ncloc'))
            };
          } else {
            console.log('ℹ️ No previous metrics - showing only current data');
          }
          
          // Generate emoji rating indicators
          const ratingEmoji = (value) => ['❌', '🟥', '🟨', '🟨', '🟩', '🟩'][value] || '❓';
          const duplicationEmoji = (value) => value >= 4 ? '🟩' : value >= 2 ? '🟨' : '🟥';
          
          // Build the report content
          const hasPrevious = previousData.measures?.length > 0;
          const radarChart = [
            '# Code Quality Report',
            '',
            '## Quality Metrics Radar',
            '',
            '```mermaid',
            '---',
            'title: "Code Quality Metrics"',
            '---',
            'radar-beta',
            '  axis s["Security"], r["Reliability"], m["Maintainability"]',
            '  axis c["Coverage"], d["Code Duplication"], l["Lines of Code"]',
            `  curve current["Current"]{${current.security}, ${current.reliability}, ${current.maintainability}, ${current.coverage}, ${current.duplicateCode}, ${current.linesOfCode}}`,
            hasPrevious ? `  curve previous["Previous"]{${previous.security}, ${previous.reliability}, ${previous.maintainability}, ${previous.coverage}, ${previous.duplicateCode}, ${previous.linesOfCode}}` : '',
            '  max 5',
            '  min 0',
            '```',
            '',
            '## Current Metrics',
            '',
            '| Metric | Current Value | Rating |',
            '|--------|---------------|--------|',
            `| Security Rating | ${getMetricValue(currentMeasures, 'security_rating') || 'No data'} | ${ratingEmoji(current.security)} |`,
            `| Reliability Rating | ${getMetricValue(currentMeasures, 'reliability_rating') || 'No data'} | ${ratingEmoji(current.reliability)} |`,
            `| Maintainability Rating | ${getMetricValue(currentMeasures, 'sqale_rating') || 'No data'} | ${ratingEmoji(current.maintainability)} |`,
            `| Coverage | ${getMetricValue(currentMeasures, 'coverage') || 'No data'}% | ${ratingEmoji(current.coverage)} |`,
            `| Code Duplication | ${getMetricValue(currentMeasures, 'duplicated_lines_density') || 'No data'}% | ${duplicationEmoji(current.duplicateCode)} |`,
            `| Lines of Code | ${getMetricValue(currentMeasures, 'ncloc') || 'No data'} | 📊 |`,
            '',
            '## SonarCloud Badges',
            '',
            '[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=reliability_rating)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '',
            '[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=coverage)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '[![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=duplicated_lines_density)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '[![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=merlinbecker_CodexMiroir&metric=ncloc)](https://sonarcloud.io/summary/new_code?id=merlinbecker_CodexMiroir)',
            '',
            `Generated on: ${new Date().toISOString()}`
          ].filter(line => line !== '').join('\n');
          
          // Write report to file
          fs.writeFileSync('codequality/report.md', radarChart);
          console.log('✅ Quality report generated successfully');
          EOF
          
          # Generate the radar chart
          node generate_radar.mjs "$current_json" "$previous_json"
          
          echo "Generated codequality/report.md:"
          cat codequality/report.md

      # Commit and push the report
      - name: Commit quality report
        if: steps.check-label.outputs.should-run != 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add codequality/report.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Update code quality report [skip ci]"
          
          # Push to the appropriate branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, push to the head branch
            git push origin HEAD:${{ github.head_ref }}
          else
            # For direct pushes to main
            git push
          fi

      # Comment on PR with quality report
      - name: Comment on PR with quality report
        if: github.event_name == 'pull_request' && steps.check-label.outputs.should-run != 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const reportContent = fs.readFileSync('codequality/report.md', 'utf8');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 📊 Code Quality Report\n\n${reportContent}`
              });
            } catch (error) {
              console.log('Could not read or post quality report:', error.message);
            }